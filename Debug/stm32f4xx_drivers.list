
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000844  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a08  08000a10  00010a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a08  08000a08  00010a10  2**0
                  CONTENTS
  4 .ARM          00000000  08000a08  08000a08  00010a10  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a08  08000a10  00010a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a08  08000a08  00010a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a0c  08000a0c  00010a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000a10  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000a10  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010a10  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000add  00000000  00000000  00010a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002cb  00000000  00000000  00011517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  000117e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a0  00000000  00000000  000118b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002395  00000000  00000000  00011950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000f96  00000000  00000000  00013ce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009704  00000000  00000000  00014c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001e37f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000288  00000000  00000000  0001e3d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080009f0 	.word	0x080009f0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080009f0 	.word	0x080009f0

08000204 <GPIO_PeriClockControl>:
 * @param pGPIOx        địa chỉ của port GPIO
 * @param EnorDi        ENABLE or DISABLE macros
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	70fb      	strb	r3, [r7, #3]
     if (EnorDi == ENABLE)
 8000210:	78fb      	ldrb	r3, [r7, #3]
 8000212:	2b01      	cmp	r3, #1
 8000214:	d157      	bne.n	80002c6 <GPIO_PeriClockControl+0xc2>
     {
          if (pGPIOx == GPIOA)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a59      	ldr	r2, [pc, #356]	; (8000380 <GPIO_PeriClockControl+0x17c>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <GPIO_PeriClockControl+0x28>
          {
               GPIOA_PCLK_EN();
 800021e:	4b59      	ldr	r3, [pc, #356]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000222:	4a58      	ldr	r2, [pc, #352]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000224:	f043 0301 	orr.w	r3, r3, #1
 8000228:	6313      	str	r3, [r2, #48]	; 0x30
          else if (pGPIOx == GPIOH)
          {
               GPIOH_PCLK_DI();
          }
     }
}
 800022a:	e0a3      	b.n	8000374 <GPIO_PeriClockControl+0x170>
          else if (pGPIOx == GPIOB)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a56      	ldr	r2, [pc, #344]	; (8000388 <GPIO_PeriClockControl+0x184>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d106      	bne.n	8000242 <GPIO_PeriClockControl+0x3e>
               GPIOB_PCLK_EN();
 8000234:	4b53      	ldr	r3, [pc, #332]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000238:	4a52      	ldr	r2, [pc, #328]	; (8000384 <GPIO_PeriClockControl+0x180>)
 800023a:	f043 0302 	orr.w	r3, r3, #2
 800023e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000240:	e098      	b.n	8000374 <GPIO_PeriClockControl+0x170>
          else if (pGPIOx == GPIOC)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a51      	ldr	r2, [pc, #324]	; (800038c <GPIO_PeriClockControl+0x188>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <GPIO_PeriClockControl+0x54>
               GPIOC_PCLK_EN();
 800024a:	4b4e      	ldr	r3, [pc, #312]	; (8000384 <GPIO_PeriClockControl+0x180>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024e:	4a4d      	ldr	r2, [pc, #308]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000250:	f043 0304 	orr.w	r3, r3, #4
 8000254:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000256:	e08d      	b.n	8000374 <GPIO_PeriClockControl+0x170>
          else if (pGPIOx == GPIOD)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a4d      	ldr	r2, [pc, #308]	; (8000390 <GPIO_PeriClockControl+0x18c>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d106      	bne.n	800026e <GPIO_PeriClockControl+0x6a>
               GPIOD_PCLK_EN();
 8000260:	4b48      	ldr	r3, [pc, #288]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000264:	4a47      	ldr	r2, [pc, #284]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000266:	f043 0308 	orr.w	r3, r3, #8
 800026a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800026c:	e082      	b.n	8000374 <GPIO_PeriClockControl+0x170>
          else if (pGPIOx == GPIOE)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4a48      	ldr	r2, [pc, #288]	; (8000394 <GPIO_PeriClockControl+0x190>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d106      	bne.n	8000284 <GPIO_PeriClockControl+0x80>
               GPIOE_PCLK_EN();
 8000276:	4b43      	ldr	r3, [pc, #268]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027a:	4a42      	ldr	r2, [pc, #264]	; (8000384 <GPIO_PeriClockControl+0x180>)
 800027c:	f043 0310 	orr.w	r3, r3, #16
 8000280:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000282:	e077      	b.n	8000374 <GPIO_PeriClockControl+0x170>
          else if (pGPIOx == GPIOF)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4a44      	ldr	r2, [pc, #272]	; (8000398 <GPIO_PeriClockControl+0x194>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d106      	bne.n	800029a <GPIO_PeriClockControl+0x96>
               GPIOF_PCLK_EN();
 800028c:	4b3d      	ldr	r3, [pc, #244]	; (8000384 <GPIO_PeriClockControl+0x180>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000290:	4a3c      	ldr	r2, [pc, #240]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000292:	f043 0320 	orr.w	r3, r3, #32
 8000296:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000298:	e06c      	b.n	8000374 <GPIO_PeriClockControl+0x170>
          else if (pGPIOx == GPIOG)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a3f      	ldr	r2, [pc, #252]	; (800039c <GPIO_PeriClockControl+0x198>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d106      	bne.n	80002b0 <GPIO_PeriClockControl+0xac>
               GPIOG_PCLK_EN();
 80002a2:	4b38      	ldr	r3, [pc, #224]	; (8000384 <GPIO_PeriClockControl+0x180>)
 80002a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a6:	4a37      	ldr	r2, [pc, #220]	; (8000384 <GPIO_PeriClockControl+0x180>)
 80002a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ae:	e061      	b.n	8000374 <GPIO_PeriClockControl+0x170>
          else if (pGPIOx == GPIOH)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4a3b      	ldr	r2, [pc, #236]	; (80003a0 <GPIO_PeriClockControl+0x19c>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d15d      	bne.n	8000374 <GPIO_PeriClockControl+0x170>
               GPIOH_PCLK_EN();
 80002b8:	4b32      	ldr	r3, [pc, #200]	; (8000384 <GPIO_PeriClockControl+0x180>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002bc:	4a31      	ldr	r2, [pc, #196]	; (8000384 <GPIO_PeriClockControl+0x180>)
 80002be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002c4:	e056      	b.n	8000374 <GPIO_PeriClockControl+0x170>
          if (pGPIOx == GPIOA)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a2d      	ldr	r2, [pc, #180]	; (8000380 <GPIO_PeriClockControl+0x17c>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d106      	bne.n	80002dc <GPIO_PeriClockControl+0xd8>
               GPIOA_PCLK_DI();
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <GPIO_PeriClockControl+0x180>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	4a2c      	ldr	r2, [pc, #176]	; (8000384 <GPIO_PeriClockControl+0x180>)
 80002d4:	f023 0301 	bic.w	r3, r3, #1
 80002d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002da:	e04b      	b.n	8000374 <GPIO_PeriClockControl+0x170>
          else if (pGPIOx == GPIOB)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a2a      	ldr	r2, [pc, #168]	; (8000388 <GPIO_PeriClockControl+0x184>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d106      	bne.n	80002f2 <GPIO_PeriClockControl+0xee>
               GPIOB_PCLK_DI();
 80002e4:	4b27      	ldr	r3, [pc, #156]	; (8000384 <GPIO_PeriClockControl+0x180>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e8:	4a26      	ldr	r2, [pc, #152]	; (8000384 <GPIO_PeriClockControl+0x180>)
 80002ea:	f023 0302 	bic.w	r3, r3, #2
 80002ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f0:	e040      	b.n	8000374 <GPIO_PeriClockControl+0x170>
          else if (pGPIOx == GPIOC)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a25      	ldr	r2, [pc, #148]	; (800038c <GPIO_PeriClockControl+0x188>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d106      	bne.n	8000308 <GPIO_PeriClockControl+0x104>
               GPIOC_PCLK_DI();
 80002fa:	4b22      	ldr	r3, [pc, #136]	; (8000384 <GPIO_PeriClockControl+0x180>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fe:	4a21      	ldr	r2, [pc, #132]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000300:	f023 0304 	bic.w	r3, r3, #4
 8000304:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000306:	e035      	b.n	8000374 <GPIO_PeriClockControl+0x170>
          else if (pGPIOx == GPIOD)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a21      	ldr	r2, [pc, #132]	; (8000390 <GPIO_PeriClockControl+0x18c>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d106      	bne.n	800031e <GPIO_PeriClockControl+0x11a>
               GPIOD_PCLK_DI();
 8000310:	4b1c      	ldr	r3, [pc, #112]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000314:	4a1b      	ldr	r2, [pc, #108]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000316:	f023 0308 	bic.w	r3, r3, #8
 800031a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031c:	e02a      	b.n	8000374 <GPIO_PeriClockControl+0x170>
          else if (pGPIOx == GPIOE)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a1c      	ldr	r2, [pc, #112]	; (8000394 <GPIO_PeriClockControl+0x190>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d106      	bne.n	8000334 <GPIO_PeriClockControl+0x130>
               GPIOE_PCLK_DI();
 8000326:	4b17      	ldr	r3, [pc, #92]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032a:	4a16      	ldr	r2, [pc, #88]	; (8000384 <GPIO_PeriClockControl+0x180>)
 800032c:	f023 0310 	bic.w	r3, r3, #16
 8000330:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000332:	e01f      	b.n	8000374 <GPIO_PeriClockControl+0x170>
          else if (pGPIOx == GPIOF)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a18      	ldr	r2, [pc, #96]	; (8000398 <GPIO_PeriClockControl+0x194>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d106      	bne.n	800034a <GPIO_PeriClockControl+0x146>
               GPIOF_PCLK_DI();
 800033c:	4b11      	ldr	r3, [pc, #68]	; (8000384 <GPIO_PeriClockControl+0x180>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000340:	4a10      	ldr	r2, [pc, #64]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000342:	f023 0320 	bic.w	r3, r3, #32
 8000346:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000348:	e014      	b.n	8000374 <GPIO_PeriClockControl+0x170>
          else if (pGPIOx == GPIOG)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a13      	ldr	r2, [pc, #76]	; (800039c <GPIO_PeriClockControl+0x198>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d106      	bne.n	8000360 <GPIO_PeriClockControl+0x15c>
               GPIOG_PCLK_DI();
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000356:	4a0b      	ldr	r2, [pc, #44]	; (8000384 <GPIO_PeriClockControl+0x180>)
 8000358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800035c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035e:	e009      	b.n	8000374 <GPIO_PeriClockControl+0x170>
          else if (pGPIOx == GPIOH)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a0f      	ldr	r2, [pc, #60]	; (80003a0 <GPIO_PeriClockControl+0x19c>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d105      	bne.n	8000374 <GPIO_PeriClockControl+0x170>
               GPIOH_PCLK_DI();
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <GPIO_PeriClockControl+0x180>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036c:	4a05      	ldr	r2, [pc, #20]	; (8000384 <GPIO_PeriClockControl+0x180>)
 800036e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000372:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40020000 	.word	0x40020000
 8000384:	40023800 	.word	0x40023800
 8000388:	40020400 	.word	0x40020400
 800038c:	40020800 	.word	0x40020800
 8000390:	40020c00 	.word	0x40020c00
 8000394:	40021000 	.word	0x40021000
 8000398:	40021400 	.word	0x40021400
 800039c:	40021800 	.word	0x40021800
 80003a0:	40021c00 	.word	0x40021c00

080003a4 <GPIO_Init>:
 * @brief   Khởi tạo pin
 *
 * @param pGPIOhandle   chứa địa chỉ của port GPIO chứa pin sửa dụng  và cấu hình pin
 */
void GPIO_Init(GPIO_Handle_t *pGPIOhandle)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
     GPIO_PeriClockControl(pGPIOhandle->pGPIOx, ENABLE);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2101      	movs	r1, #1
 80003b2:	4618      	mov	r0, r3
 80003b4:	f7ff ff26 	bl	8000204 <GPIO_PeriClockControl>

     uint32_t temp = 0;                                                // Biến tạm thời
 80003b8:	2300      	movs	r3, #0
 80003ba:	617b      	str	r3, [r7, #20]
                                                                       // 1. Config mode of gpio pin
     if (pGPIOhandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) // Nhỏ hơn hoặc bằng 3 là non-interrupt mode
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	795b      	ldrb	r3, [r3, #5]
 80003c0:	2b03      	cmp	r3, #3
 80003c2:	d81f      	bhi.n	8000404 <GPIO_Init+0x60>
     {
          temp = (pGPIOhandle->GPIO_PinConfig.GPIO_PinMode << (2 * (pGPIOhandle->GPIO_PinConfig.GPIO_PinNumber)));
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	795b      	ldrb	r3, [r3, #5]
 80003c8:	461a      	mov	r2, r3
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	791b      	ldrb	r3, [r3, #4]
 80003ce:	005b      	lsls	r3, r3, #1
 80003d0:	fa02 f303 	lsl.w	r3, r2, r3
 80003d4:	617b      	str	r3, [r7, #20]
          // Xác định xem pin thuộc mode gì và nằm ở vị trí pin bao nhiêu << nhân 2 vì mỗi pin có 2 bit điều khiển
          pGPIOhandle->pGPIOx->MODER &= ~(0x03 << pGPIOhandle->GPIO_PinConfig.GPIO_PinNumber); // clear 2 bit cần setting trước khi setting
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	791b      	ldrb	r3, [r3, #4]
 80003e0:	4619      	mov	r1, r3
 80003e2:	2303      	movs	r3, #3
 80003e4:	408b      	lsls	r3, r1
 80003e6:	43db      	mvns	r3, r3
 80003e8:	4619      	mov	r1, r3
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	400a      	ands	r2, r1
 80003f0:	601a      	str	r2, [r3, #0]
          pGPIOhandle->pGPIOx->MODER |= temp;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	6819      	ldr	r1, [r3, #0]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	697a      	ldr	r2, [r7, #20]
 80003fe:	430a      	orrs	r2, r1
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	e0c2      	b.n	800058a <GPIO_Init+0x1e6>
          // Truy cập vào địa chỉ GPIO cần setup -> Truy cập đến địa chỉ thanh ghi setup mode
     }
     else
     {
          // interrupt mode
          if (pGPIOhandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) // Xung sườn xuóng
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	795b      	ldrb	r3, [r3, #5]
 8000408:	2b04      	cmp	r3, #4
 800040a:	d117      	bne.n	800043c <GPIO_Init+0x98>
          {
               // 1. configure the falling trigger selection register (FTSR)
               EXTI->FTSR |= (1 << (pGPIOhandle->GPIO_PinConfig.GPIO_PinNumber));
 800040c:	4b47      	ldr	r3, [pc, #284]	; (800052c <GPIO_Init+0x188>)
 800040e:	68db      	ldr	r3, [r3, #12]
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	7912      	ldrb	r2, [r2, #4]
 8000414:	4611      	mov	r1, r2
 8000416:	2201      	movs	r2, #1
 8000418:	408a      	lsls	r2, r1
 800041a:	4611      	mov	r1, r2
 800041c:	4a43      	ldr	r2, [pc, #268]	; (800052c <GPIO_Init+0x188>)
 800041e:	430b      	orrs	r3, r1
 8000420:	60d3      	str	r3, [r2, #12]
               // Clear the corresponding RTSR bit
               EXTI->RTSR &= ~(1 << (pGPIOhandle->GPIO_PinConfig.GPIO_PinNumber));
 8000422:	4b42      	ldr	r3, [pc, #264]	; (800052c <GPIO_Init+0x188>)
 8000424:	689b      	ldr	r3, [r3, #8]
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	7912      	ldrb	r2, [r2, #4]
 800042a:	4611      	mov	r1, r2
 800042c:	2201      	movs	r2, #1
 800042e:	408a      	lsls	r2, r1
 8000430:	43d2      	mvns	r2, r2
 8000432:	4611      	mov	r1, r2
 8000434:	4a3d      	ldr	r2, [pc, #244]	; (800052c <GPIO_Init+0x188>)
 8000436:	400b      	ands	r3, r1
 8000438:	6093      	str	r3, [r2, #8]
 800043a:	e035      	b.n	80004a8 <GPIO_Init+0x104>
          }
          else if (pGPIOhandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT) // Xung sườn lên
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	795b      	ldrb	r3, [r3, #5]
 8000440:	2b05      	cmp	r3, #5
 8000442:	d117      	bne.n	8000474 <GPIO_Init+0xd0>
          {
               // 1. configure the Rising trigger selection register (RTSR)
               EXTI->RTSR |= (1 << (pGPIOhandle->GPIO_PinConfig.GPIO_PinNumber));
 8000444:	4b39      	ldr	r3, [pc, #228]	; (800052c <GPIO_Init+0x188>)
 8000446:	689b      	ldr	r3, [r3, #8]
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	7912      	ldrb	r2, [r2, #4]
 800044c:	4611      	mov	r1, r2
 800044e:	2201      	movs	r2, #1
 8000450:	408a      	lsls	r2, r1
 8000452:	4611      	mov	r1, r2
 8000454:	4a35      	ldr	r2, [pc, #212]	; (800052c <GPIO_Init+0x188>)
 8000456:	430b      	orrs	r3, r1
 8000458:	6093      	str	r3, [r2, #8]
               // Clear the corresponding FTSR bit
               EXTI->FTSR &= ~(1 << (pGPIOhandle->GPIO_PinConfig.GPIO_PinNumber));
 800045a:	4b34      	ldr	r3, [pc, #208]	; (800052c <GPIO_Init+0x188>)
 800045c:	68db      	ldr	r3, [r3, #12]
 800045e:	687a      	ldr	r2, [r7, #4]
 8000460:	7912      	ldrb	r2, [r2, #4]
 8000462:	4611      	mov	r1, r2
 8000464:	2201      	movs	r2, #1
 8000466:	408a      	lsls	r2, r1
 8000468:	43d2      	mvns	r2, r2
 800046a:	4611      	mov	r1, r2
 800046c:	4a2f      	ldr	r2, [pc, #188]	; (800052c <GPIO_Init+0x188>)
 800046e:	400b      	ands	r3, r1
 8000470:	60d3      	str	r3, [r2, #12]
 8000472:	e019      	b.n	80004a8 <GPIO_Init+0x104>
          }
          else if (pGPIOhandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT) // 2 cạnh
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	795b      	ldrb	r3, [r3, #5]
 8000478:	2b06      	cmp	r3, #6
 800047a:	d115      	bne.n	80004a8 <GPIO_Init+0x104>
          {
               // 1. configure the FTSR and RTSR
               EXTI->FTSR |= (1 << (pGPIOhandle->GPIO_PinConfig.GPIO_PinNumber));
 800047c:	4b2b      	ldr	r3, [pc, #172]	; (800052c <GPIO_Init+0x188>)
 800047e:	68db      	ldr	r3, [r3, #12]
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	7912      	ldrb	r2, [r2, #4]
 8000484:	4611      	mov	r1, r2
 8000486:	2201      	movs	r2, #1
 8000488:	408a      	lsls	r2, r1
 800048a:	4611      	mov	r1, r2
 800048c:	4a27      	ldr	r2, [pc, #156]	; (800052c <GPIO_Init+0x188>)
 800048e:	430b      	orrs	r3, r1
 8000490:	60d3      	str	r3, [r2, #12]
               EXTI->RTSR |= (1 << (pGPIOhandle->GPIO_PinConfig.GPIO_PinNumber));
 8000492:	4b26      	ldr	r3, [pc, #152]	; (800052c <GPIO_Init+0x188>)
 8000494:	689b      	ldr	r3, [r3, #8]
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	7912      	ldrb	r2, [r2, #4]
 800049a:	4611      	mov	r1, r2
 800049c:	2201      	movs	r2, #1
 800049e:	408a      	lsls	r2, r1
 80004a0:	4611      	mov	r1, r2
 80004a2:	4a22      	ldr	r2, [pc, #136]	; (800052c <GPIO_Init+0x188>)
 80004a4:	430b      	orrs	r3, r1
 80004a6:	6093      	str	r3, [r2, #8]
          }

          // 2. configure the GPIO port selection in SYSCFG_EXTI
          uint8_t temp1 = (pGPIOhandle->GPIO_PinConfig.GPIO_PinNumber) / 4; // Xác định xem PinX thuôc thanh ghi EXTICR nào. ĐÂy là mảng nên bắt đầu từ ko nên nếu chia cho 4 dư 1 nghĩa là thanh ghi thứ 2
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	791b      	ldrb	r3, [r3, #4]
 80004ac:	089b      	lsrs	r3, r3, #2
 80004ae:	74fb      	strb	r3, [r7, #19]
          uint8_t temp2 = (pGPIOhandle->GPIO_PinConfig.GPIO_PinNumber) % 4; // Xác định xem Pin thuộc EXTI nào
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	791b      	ldrb	r3, [r3, #4]
 80004b4:	f003 0303 	and.w	r3, r3, #3
 80004b8:	74bb      	strb	r3, [r7, #18]
          uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOhandle->pGPIOx);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a1c      	ldr	r2, [pc, #112]	; (8000530 <GPIO_Init+0x18c>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d045      	beq.n	8000550 <GPIO_Init+0x1ac>
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a1a      	ldr	r2, [pc, #104]	; (8000534 <GPIO_Init+0x190>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d02b      	beq.n	8000526 <GPIO_Init+0x182>
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a19      	ldr	r2, [pc, #100]	; (8000538 <GPIO_Init+0x194>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d024      	beq.n	8000522 <GPIO_Init+0x17e>
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a17      	ldr	r2, [pc, #92]	; (800053c <GPIO_Init+0x198>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d01d      	beq.n	800051e <GPIO_Init+0x17a>
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a16      	ldr	r2, [pc, #88]	; (8000540 <GPIO_Init+0x19c>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d016      	beq.n	800051a <GPIO_Init+0x176>
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a14      	ldr	r2, [pc, #80]	; (8000544 <GPIO_Init+0x1a0>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d00f      	beq.n	8000516 <GPIO_Init+0x172>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a13      	ldr	r2, [pc, #76]	; (8000548 <GPIO_Init+0x1a4>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d008      	beq.n	8000512 <GPIO_Init+0x16e>
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a11      	ldr	r2, [pc, #68]	; (800054c <GPIO_Init+0x1a8>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d101      	bne.n	800050e <GPIO_Init+0x16a>
 800050a:	2307      	movs	r3, #7
 800050c:	e021      	b.n	8000552 <GPIO_Init+0x1ae>
 800050e:	2300      	movs	r3, #0
 8000510:	e01f      	b.n	8000552 <GPIO_Init+0x1ae>
 8000512:	2306      	movs	r3, #6
 8000514:	e01d      	b.n	8000552 <GPIO_Init+0x1ae>
 8000516:	2305      	movs	r3, #5
 8000518:	e01b      	b.n	8000552 <GPIO_Init+0x1ae>
 800051a:	2304      	movs	r3, #4
 800051c:	e019      	b.n	8000552 <GPIO_Init+0x1ae>
 800051e:	2303      	movs	r3, #3
 8000520:	e017      	b.n	8000552 <GPIO_Init+0x1ae>
 8000522:	2302      	movs	r3, #2
 8000524:	e015      	b.n	8000552 <GPIO_Init+0x1ae>
 8000526:	2301      	movs	r3, #1
 8000528:	e013      	b.n	8000552 <GPIO_Init+0x1ae>
 800052a:	bf00      	nop
 800052c:	40013c00 	.word	0x40013c00
 8000530:	40020000 	.word	0x40020000
 8000534:	40020400 	.word	0x40020400
 8000538:	40020800 	.word	0x40020800
 800053c:	40020c00 	.word	0x40020c00
 8000540:	40021000 	.word	0x40021000
 8000544:	40021400 	.word	0x40021400
 8000548:	40021800 	.word	0x40021800
 800054c:	40021c00 	.word	0x40021c00
 8000550:	2300      	movs	r3, #0
 8000552:	747b      	strb	r3, [r7, #17]
          SYSCFG_PLCK_EN();
 8000554:	4b5c      	ldr	r3, [pc, #368]	; (80006c8 <GPIO_Init+0x324>)
 8000556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000558:	4a5b      	ldr	r2, [pc, #364]	; (80006c8 <GPIO_Init+0x324>)
 800055a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055e:	6453      	str	r3, [r2, #68]	; 0x44
          SYSCFG->EXTICR[temp1] = portcode << (4 * temp2);
 8000560:	7c7a      	ldrb	r2, [r7, #17]
 8000562:	7cbb      	ldrb	r3, [r7, #18]
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	fa02 f103 	lsl.w	r1, r2, r3
 800056a:	4a58      	ldr	r2, [pc, #352]	; (80006cc <GPIO_Init+0x328>)
 800056c:	7cfb      	ldrb	r3, [r7, #19]
 800056e:	3302      	adds	r3, #2
 8000570:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          // 3. enable the EXTI interrupt delivery using IMR  ( Interrupt mask register )
          EXTI->IMR |= (1 << (pGPIOhandle->GPIO_PinConfig.GPIO_PinNumber));
 8000574:	4b56      	ldr	r3, [pc, #344]	; (80006d0 <GPIO_Init+0x32c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	7912      	ldrb	r2, [r2, #4]
 800057c:	4611      	mov	r1, r2
 800057e:	2201      	movs	r2, #1
 8000580:	408a      	lsls	r2, r1
 8000582:	4611      	mov	r1, r2
 8000584:	4a52      	ldr	r2, [pc, #328]	; (80006d0 <GPIO_Init+0x32c>)
 8000586:	430b      	orrs	r3, r1
 8000588:	6013      	str	r3, [r2, #0]
     }
     temp = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
     // 2. config the speed
     temp = (pGPIOhandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * (pGPIOhandle->GPIO_PinConfig.GPIO_PinNumber)));
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	799b      	ldrb	r3, [r3, #6]
 8000592:	461a      	mov	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	791b      	ldrb	r3, [r3, #4]
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	fa02 f303 	lsl.w	r3, r2, r3
 800059e:	617b      	str	r3, [r7, #20]
     pGPIOhandle->pGPIOx->OSPEEDR &= ~(0x03 << pGPIOhandle->GPIO_PinConfig.GPIO_PinNumber); // clear 2 bit cần setting trước khi setting
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	689a      	ldr	r2, [r3, #8]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	791b      	ldrb	r3, [r3, #4]
 80005aa:	4619      	mov	r1, r3
 80005ac:	2303      	movs	r3, #3
 80005ae:	408b      	lsls	r3, r1
 80005b0:	43db      	mvns	r3, r3
 80005b2:	4619      	mov	r1, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	400a      	ands	r2, r1
 80005ba:	609a      	str	r2, [r3, #8]
     pGPIOhandle->pGPIOx->OSPEEDR |= temp;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	6899      	ldr	r1, [r3, #8]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	697a      	ldr	r2, [r7, #20]
 80005c8:	430a      	orrs	r2, r1
 80005ca:	609a      	str	r2, [r3, #8]
     temp = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
     // 3. config the pull up or the pull down settings
     temp = (pGPIOhandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * (pGPIOhandle->GPIO_PinConfig.GPIO_PinNumber)));
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	79db      	ldrb	r3, [r3, #7]
 80005d4:	461a      	mov	r2, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	791b      	ldrb	r3, [r3, #4]
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	fa02 f303 	lsl.w	r3, r2, r3
 80005e0:	617b      	str	r3, [r7, #20]
     pGPIOhandle->pGPIOx->PUPDR &= ~(0x03 << pGPIOhandle->GPIO_PinConfig.GPIO_PinNumber); // clear 2 bit cần setting trước khi setting
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	68da      	ldr	r2, [r3, #12]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	791b      	ldrb	r3, [r3, #4]
 80005ec:	4619      	mov	r1, r3
 80005ee:	2303      	movs	r3, #3
 80005f0:	408b      	lsls	r3, r1
 80005f2:	43db      	mvns	r3, r3
 80005f4:	4619      	mov	r1, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	400a      	ands	r2, r1
 80005fc:	60da      	str	r2, [r3, #12]
     pGPIOhandle->pGPIOx->PUPDR |= temp;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	68d9      	ldr	r1, [r3, #12]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	697a      	ldr	r2, [r7, #20]
 800060a:	430a      	orrs	r2, r1
 800060c:	60da      	str	r2, [r3, #12]
     temp = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
     // 4. config out put type
     temp = (pGPIOhandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOhandle->GPIO_PinConfig.GPIO_PinNumber));
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	7a1b      	ldrb	r3, [r3, #8]
 8000616:	461a      	mov	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	791b      	ldrb	r3, [r3, #4]
 800061c:	fa02 f303 	lsl.w	r3, r2, r3
 8000620:	617b      	str	r3, [r7, #20]
     pGPIOhandle->pGPIOx->OTYPER &= ~(0x01 << pGPIOhandle->GPIO_PinConfig.GPIO_PinNumber); // clear 2 bit cần setting trước khi setting
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	685a      	ldr	r2, [r3, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	4619      	mov	r1, r3
 800062e:	2301      	movs	r3, #1
 8000630:	408b      	lsls	r3, r1
 8000632:	43db      	mvns	r3, r3
 8000634:	4619      	mov	r1, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	400a      	ands	r2, r1
 800063c:	605a      	str	r2, [r3, #4]
     pGPIOhandle->pGPIOx->OTYPER |= temp;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	6859      	ldr	r1, [r3, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	430a      	orrs	r2, r1
 800064c:	605a      	str	r2, [r3, #4]
     temp = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]
     // 5. config the alt functionality
     if (pGPIOhandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	795b      	ldrb	r3, [r3, #5]
 8000656:	2b02      	cmp	r3, #2
 8000658:	d131      	bne.n	80006be <GPIO_Init+0x31a>
     {
          uint8_t temp1, temp2;
          temp1 = pGPIOhandle->GPIO_PinConfig.GPIO_PinNumber / 8; // Xác định xem nằm ở GPIO alternate function low OR highh register . Chia lấy phần nguyên
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	791b      	ldrb	r3, [r3, #4]
 800065e:	08db      	lsrs	r3, r3, #3
 8000660:	743b      	strb	r3, [r7, #16]
          temp2 = pGPIOhandle->GPIO_PinConfig.GPIO_PinNumber % 8; // Xác định xem thuộc bit bao nhiêu của GPIO alternate function low/highh register . Chia lấy phần dư
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	73fb      	strb	r3, [r7, #15]
          pGPIOhandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	7c3a      	ldrb	r2, [r7, #16]
 8000672:	3208      	adds	r2, #8
 8000674:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	220f      	movs	r2, #15
 800067e:	fa02 f303 	lsl.w	r3, r2, r3
 8000682:	43db      	mvns	r3, r3
 8000684:	4618      	mov	r0, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	7c3a      	ldrb	r2, [r7, #16]
 800068c:	4001      	ands	r1, r0
 800068e:	3208      	adds	r2, #8
 8000690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pGPIOhandle->pGPIOx->AFR[temp1] |= pGPIOhandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	7c3a      	ldrb	r2, [r7, #16]
 800069a:	3208      	adds	r2, #8
 800069c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	7a5b      	ldrb	r3, [r3, #9]
 80006a4:	461a      	mov	r2, r3
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	fa02 f303 	lsl.w	r3, r2, r3
 80006ae:	4618      	mov	r0, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	7c3a      	ldrb	r2, [r7, #16]
 80006b6:	4301      	orrs	r1, r0
 80006b8:	3208      	adds	r2, #8
 80006ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          // Do mỗi pin cần 4 bit điều khiển
     }
};
 80006be:	bf00      	nop
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40013800 	.word	0x40013800
 80006d0:	40013c00 	.word	0x40013c00

080006d4 <GPIO_ToggleOutputPin>:
/**
 * @brief Đổi giá trị đầu ra trước đó 1 pin
 *
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	70fb      	strb	r3, [r7, #3]
     pGPIOx->ODR = pGPIOx->ODR ^ (1 << PinNumber); // Phép Xor 1^1 = 0 ; 0^1 = 1
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	695b      	ldr	r3, [r3, #20]
 80006e4:	78fa      	ldrb	r2, [r7, #3]
 80006e6:	2101      	movs	r1, #1
 80006e8:	fa01 f202 	lsl.w	r2, r1, r2
 80006ec:	405a      	eors	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	615a      	str	r2, [r3, #20]
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <GPIO_IRQInterruptConfig>:
 *
 * @param IRQNumber      vị trí trong bảng vector table
 * @param EnorDi             enable hoặc disable
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	460a      	mov	r2, r1
 8000706:	71fb      	strb	r3, [r7, #7]
 8000708:	4613      	mov	r3, r2
 800070a:	71bb      	strb	r3, [r7, #6]

     // config NVIC register

     if (EnorDi == ENABLE) // Các thanh ghi này chỉ có thể enable ko thể disable
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d133      	bne.n	800077a <GPIO_IRQInterruptConfig+0x7e>
     {
          if (IRQNumber <= 31) // 0-31
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b1f      	cmp	r3, #31
 8000716:	d80a      	bhi.n	800072e <GPIO_IRQInterruptConfig+0x32>
          {
               // program ISER0 register
               *NVIC_ISER0 |= (1 << IRQNumber);
 8000718:	4b34      	ldr	r3, [pc, #208]	; (80007ec <GPIO_IRQInterruptConfig+0xf0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	79fa      	ldrb	r2, [r7, #7]
 800071e:	2101      	movs	r1, #1
 8000720:	fa01 f202 	lsl.w	r2, r1, r2
 8000724:	4611      	mov	r1, r2
 8000726:	4a31      	ldr	r2, [pc, #196]	; (80007ec <GPIO_IRQInterruptConfig+0xf0>)
 8000728:	430b      	orrs	r3, r1
 800072a:	6013      	str	r3, [r2, #0]
          {
               // program ICER2 register
               *NVIC_ICER2 |= (1 << IRQNumber % 64);
          }
     }
}
 800072c:	e059      	b.n	80007e2 <GPIO_IRQInterruptConfig+0xe6>
          else if (IRQNumber > 31 && IRQNumber < 64) // 32-63
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b1f      	cmp	r3, #31
 8000732:	d90f      	bls.n	8000754 <GPIO_IRQInterruptConfig+0x58>
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	2b3f      	cmp	r3, #63	; 0x3f
 8000738:	d80c      	bhi.n	8000754 <GPIO_IRQInterruptConfig+0x58>
               *NVIC_ISER1 |= (1 << IRQNumber % 32); // Giả sử  45 %32 = 13 => vị trí thứ 13 trong thanh ghi  ( bắt daauf từ 0)
 800073a:	4b2d      	ldr	r3, [pc, #180]	; (80007f0 <GPIO_IRQInterruptConfig+0xf4>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	79fa      	ldrb	r2, [r7, #7]
 8000740:	f002 021f 	and.w	r2, r2, #31
 8000744:	2101      	movs	r1, #1
 8000746:	fa01 f202 	lsl.w	r2, r1, r2
 800074a:	4611      	mov	r1, r2
 800074c:	4a28      	ldr	r2, [pc, #160]	; (80007f0 <GPIO_IRQInterruptConfig+0xf4>)
 800074e:	430b      	orrs	r3, r1
 8000750:	6013      	str	r3, [r2, #0]
 8000752:	e046      	b.n	80007e2 <GPIO_IRQInterruptConfig+0xe6>
          else if (IRQNumber >= 64 && IRQNumber < 96) // 64 -95
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	2b3f      	cmp	r3, #63	; 0x3f
 8000758:	d943      	bls.n	80007e2 <GPIO_IRQInterruptConfig+0xe6>
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	2b5f      	cmp	r3, #95	; 0x5f
 800075e:	d840      	bhi.n	80007e2 <GPIO_IRQInterruptConfig+0xe6>
               *NVIC_ISER2 |= (1 << IRQNumber % 64); // Giả sử  70 %64 = 6 => vị trí thứ 6 trong thanh ghi  ( Bắt đầu từ 0)
 8000760:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <GPIO_IRQInterruptConfig+0xf8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	79fa      	ldrb	r2, [r7, #7]
 8000766:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800076a:	2101      	movs	r1, #1
 800076c:	fa01 f202 	lsl.w	r2, r1, r2
 8000770:	4611      	mov	r1, r2
 8000772:	4a20      	ldr	r2, [pc, #128]	; (80007f4 <GPIO_IRQInterruptConfig+0xf8>)
 8000774:	430b      	orrs	r3, r1
 8000776:	6013      	str	r3, [r2, #0]
}
 8000778:	e033      	b.n	80007e2 <GPIO_IRQInterruptConfig+0xe6>
          if (IRQNumber <= 31) // 0-31
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b1f      	cmp	r3, #31
 800077e:	d80a      	bhi.n	8000796 <GPIO_IRQInterruptConfig+0x9a>
               *NVIC_ICER0 |= (1 << IRQNumber);
 8000780:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <GPIO_IRQInterruptConfig+0xfc>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	79fa      	ldrb	r2, [r7, #7]
 8000786:	2101      	movs	r1, #1
 8000788:	fa01 f202 	lsl.w	r2, r1, r2
 800078c:	4611      	mov	r1, r2
 800078e:	4a1a      	ldr	r2, [pc, #104]	; (80007f8 <GPIO_IRQInterruptConfig+0xfc>)
 8000790:	430b      	orrs	r3, r1
 8000792:	6013      	str	r3, [r2, #0]
}
 8000794:	e025      	b.n	80007e2 <GPIO_IRQInterruptConfig+0xe6>
          else if (IRQNumber > 31 && IRQNumber < 64) // 32-63
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b1f      	cmp	r3, #31
 800079a:	d90f      	bls.n	80007bc <GPIO_IRQInterruptConfig+0xc0>
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	2b3f      	cmp	r3, #63	; 0x3f
 80007a0:	d80c      	bhi.n	80007bc <GPIO_IRQInterruptConfig+0xc0>
               *NVIC_ICER1 |= (1 << IRQNumber % 32);
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <GPIO_IRQInterruptConfig+0x100>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	79fa      	ldrb	r2, [r7, #7]
 80007a8:	f002 021f 	and.w	r2, r2, #31
 80007ac:	2101      	movs	r1, #1
 80007ae:	fa01 f202 	lsl.w	r2, r1, r2
 80007b2:	4611      	mov	r1, r2
 80007b4:	4a11      	ldr	r2, [pc, #68]	; (80007fc <GPIO_IRQInterruptConfig+0x100>)
 80007b6:	430b      	orrs	r3, r1
 80007b8:	6013      	str	r3, [r2, #0]
 80007ba:	e012      	b.n	80007e2 <GPIO_IRQInterruptConfig+0xe6>
          else if (IRQNumber >= 64 && IRQNumber < 96) // 64 -95
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	2b3f      	cmp	r3, #63	; 0x3f
 80007c0:	d90f      	bls.n	80007e2 <GPIO_IRQInterruptConfig+0xe6>
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b5f      	cmp	r3, #95	; 0x5f
 80007c6:	d80c      	bhi.n	80007e2 <GPIO_IRQInterruptConfig+0xe6>
               *NVIC_ICER2 |= (1 << IRQNumber % 64);
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <GPIO_IRQInterruptConfig+0x104>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	79fa      	ldrb	r2, [r7, #7]
 80007ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007d2:	2101      	movs	r1, #1
 80007d4:	fa01 f202 	lsl.w	r2, r1, r2
 80007d8:	4611      	mov	r1, r2
 80007da:	4a09      	ldr	r2, [pc, #36]	; (8000800 <GPIO_IRQInterruptConfig+0x104>)
 80007dc:	430b      	orrs	r3, r1
 80007de:	6013      	str	r3, [r2, #0]
}
 80007e0:	e7ff      	b.n	80007e2 <GPIO_IRQInterruptConfig+0xe6>
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	e000e100 	.word	0xe000e100
 80007f0:	e000e104 	.word	0xe000e104
 80007f4:	e000e108 	.word	0xe000e108
 80007f8:	e000e180 	.word	0xe000e180
 80007fc:	e000e184 	.word	0xe000e184
 8000800:	e000e188 	.word	0xe000e188

08000804 <GPIO_IRQPriorityConfig>:
 * @brief   Xét mức ưu tiên ngắt
 *
 * @param IRQPriority     Mức ưu tiên
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	6039      	str	r1, [r7, #0]
 800080e:	71fb      	strb	r3, [r7, #7]
     // 1. Tìm IPR resister (Interrupt Priority Registers)
     uint8_t iprx = IRQNumber / 4;         // XÁc định xem ngắt nằm ở thanh ghi nào từ 0 - 59
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	089b      	lsrs	r3, r3, #2
 8000814:	73fb      	strb	r3, [r7, #15]
     uint8_t iprx_section = IRQNumber % 4; // Xác định xme ngắt nằm ở section nào ( mỗi thanh ghi có 4 section , 8 bit cho 1 section => 1 thanh ghi kiểm soát mức ưu tiên cho 4 ngắt)
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	f003 0303 	and.w	r3, r3, #3
 800081c:	73bb      	strb	r3, [r7, #14]
     uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 800081e:	7bbb      	ldrb	r3, [r7, #14]
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	b2db      	uxtb	r3, r3
 8000824:	3304      	adds	r3, #4
 8000826:	737b      	strb	r3, [r7, #13]
     *(NVIC_PR_BASE_ADDR + iprx) = (IRQPriority << shift_amount);
 8000828:	7b7a      	ldrb	r2, [r7, #13]
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000832:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000836:	6839      	ldr	r1, [r7, #0]
 8000838:	fa01 f202 	lsl.w	r2, r1, r2
 800083c:	601a      	str	r2, [r3, #0]

     // Giả sử ngắt nằm ở thanh ghi thứ 1 => địa chỉ là Pr_base_Addr + 1*4 = pr_base_addr 0x04   (Do đó nhân 4 vì mỗi lần ofset là 0x04)
     // giả sử nằm ở section 1 => bắt đầu từ bit thứ 8 => lùi sang trái 8 lần . do đó phải nhân với 8
     // Nhuwng do chỉ có 4 bit cao của mỗi section mới có tác dụng nên ta phải lùi sang trái 4 bit . vD mức ưu tiên 0000_0001 => 0001_0000
}
 800083e:	bf00      	nop
 8000840:	3714      	adds	r7, #20
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr

08000848 <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
     // Xóa bit thông báo ngắt trên Pending registor
     if (EXTI->PR & (1 << PinNumber)) // nếu pin thứ x có ngắt
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <GPIO_IRQHandling+0x3c>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	79fa      	ldrb	r2, [r7, #7]
 8000858:	2101      	movs	r1, #1
 800085a:	fa01 f202 	lsl.w	r2, r1, r2
 800085e:	4013      	ands	r3, r2
 8000860:	2b00      	cmp	r3, #0
 8000862:	d009      	beq.n	8000878 <GPIO_IRQHandling+0x30>
     {
          // xóa bit
          EXTI->PR |= (1 << PinNumber); // Lưu ý xóa ở đây là set lên 1 thì có nghĩa là xóa thông báo
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <GPIO_IRQHandling+0x3c>)
 8000866:	695b      	ldr	r3, [r3, #20]
 8000868:	79fa      	ldrb	r2, [r7, #7]
 800086a:	2101      	movs	r1, #1
 800086c:	fa01 f202 	lsl.w	r2, r1, r2
 8000870:	4611      	mov	r1, r2
 8000872:	4a04      	ldr	r2, [pc, #16]	; (8000884 <GPIO_IRQHandling+0x3c>)
 8000874:	430b      	orrs	r3, r1
 8000876:	6153      	str	r3, [r2, #20]
     }
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40013c00 	.word	0x40013c00

08000888 <delay>:
#include <string.h>
#include "stm32f446xx.h"
void delay(void)
	{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
		for(uint32_t i = 0 ;i<5000;i++);
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	e002      	b.n	800089a <delay+0x12>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3301      	adds	r3, #1
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f241 3287 	movw	r2, #4999	; 0x1387
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d9f7      	bls.n	8000894 <delay+0xc>
	}
 80008a4:	bf00      	nop
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <main>:
int main(void)
{		GPIO_Handle_t GpioLed, GpioBt ;
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
		memset(&GpioLed,0,sizeof(GpioLed));  // đặt tất cả dữ liệu của cấu trúc về 0  #include <string.h>
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	220c      	movs	r2, #12
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 f88e 	bl	80009e0 <memset>
		memset(&GpioBt,0,sizeof(GpioBt));
 80008c4:	463b      	mov	r3, r7
 80008c6:	220c      	movs	r2, #12
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 f888 	bl	80009e0 <memset>
		// cấu hình nháy led

	GpioLed.pGPIOx = GPIOC ;
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <main+0x74>)
 80008d2:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10 ;
 80008d4:	230a      	movs	r3, #10
 80008d6:	743b      	strb	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT ;
 80008d8:	2301      	movs	r3, #1
 80008da:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed =GPIO_OP_SPEED_FAST ;
 80008dc:	2302      	movs	r3, #2
 80008de:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType=GPIO_OP_TYPE_PP ;
 80008e0:	2300      	movs	r3, #0
 80008e2:	753b      	strb	r3, [r7, #20]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUD ;
 80008e4:	2300      	movs	r3, #0
 80008e6:	74fb      	strb	r3, [r7, #19]
	GPIO_Init(&GpioLed);
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fd59 	bl	80003a4 <GPIO_Init>
	 // Cấu hình button phát ngắt theo sườn xuống
	GpioBt.pGPIOx = GPIOC ;
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <main+0x74>)
 80008f4:	603b      	str	r3, [r7, #0]
	GpioBt.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13 ;
 80008f6:	230d      	movs	r3, #13
 80008f8:	713b      	strb	r3, [r7, #4]
	GpioBt.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT ;
 80008fa:	2304      	movs	r3, #4
 80008fc:	717b      	strb	r3, [r7, #5]
	GpioBt.GPIO_PinConfig.GPIO_PinSpeed =GPIO_OP_SPEED_FAST ;
 80008fe:	2302      	movs	r3, #2
 8000900:	71bb      	strb	r3, [r7, #6]
	GpioBt.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUD ;
 8000902:	2300      	movs	r3, #0
 8000904:	71fb      	strb	r3, [r7, #7]
 	GPIO_Init(&GpioBt);
 8000906:	463b      	mov	r3, r7
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fd4b 	bl	80003a4 <GPIO_Init>

	// cấu hình ngắt
	  GPIO_IRQPriorityConfig(IRQ_NO_EXTI15_10,NVIC_IRQ_PRI15) ;
 800090e:	210f      	movs	r1, #15
 8000910:	2028      	movs	r0, #40	; 0x28
 8000912:	f7ff ff77 	bl	8000804 <GPIO_IRQPriorityConfig>
	  GPIO_IRQInterruptConfig(IRQ_NO_EXTI15_10, ENABLE) ;
 8000916:	2101      	movs	r1, #1
 8000918:	2028      	movs	r0, #40	; 0x28
 800091a:	f7ff feef 	bl	80006fc <GPIO_IRQInterruptConfig>
	  for (;;)
	  {
			 delay();
 800091e:	f7ff ffb3 	bl	8000888 <delay>
 8000922:	e7fc      	b.n	800091e <main+0x6e>
 8000924:	40020800 	.word	0x40020800

08000928 <EXTI15_10_IRQHandler>:
	 return 0;

}

void EXTI15_10_IRQHandler (void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	// delay();
	GPIO_IRQHandling (GPIO_PIN_NO_13) ; // Xóa thông báo ngắt đến
 800092c:	200d      	movs	r0, #13
 800092e:	f7ff ff8b 	bl	8000848 <GPIO_IRQHandling>
	//Viết chương trình ngắt từ đây
	GPIO_ToggleOutputPin(GPIOC, GPIO_PIN_NO_10);
 8000932:	210a      	movs	r1, #10
 8000934:	4802      	ldr	r0, [pc, #8]	; (8000940 <EXTI15_10_IRQHandler+0x18>)
 8000936:	f7ff fecd 	bl	80006d4 <GPIO_ToggleOutputPin>


}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40020800 	.word	0x40020800

08000944 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000944:	480d      	ldr	r0, [pc, #52]	; (800097c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000946:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000948:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800094c:	480c      	ldr	r0, [pc, #48]	; (8000980 <LoopForever+0x6>)
  ldr r1, =_edata
 800094e:	490d      	ldr	r1, [pc, #52]	; (8000984 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000950:	4a0d      	ldr	r2, [pc, #52]	; (8000988 <LoopForever+0xe>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a0a      	ldr	r2, [pc, #40]	; (800098c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000964:	4c0a      	ldr	r4, [pc, #40]	; (8000990 <LoopForever+0x16>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000972:	f000 f811 	bl	8000998 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000976:	f7ff ff9b 	bl	80008b0 <main>

0800097a <LoopForever>:

LoopForever:
    b LoopForever
 800097a:	e7fe      	b.n	800097a <LoopForever>
  ldr   r0, =_estack
 800097c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000984:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000988:	08000a10 	.word	0x08000a10
  ldr r2, =_sbss
 800098c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000990:	2000001c 	.word	0x2000001c

08000994 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <ADC_IRQHandler>
	...

08000998 <__libc_init_array>:
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	4d0d      	ldr	r5, [pc, #52]	; (80009d0 <__libc_init_array+0x38>)
 800099c:	4c0d      	ldr	r4, [pc, #52]	; (80009d4 <__libc_init_array+0x3c>)
 800099e:	1b64      	subs	r4, r4, r5
 80009a0:	10a4      	asrs	r4, r4, #2
 80009a2:	2600      	movs	r6, #0
 80009a4:	42a6      	cmp	r6, r4
 80009a6:	d109      	bne.n	80009bc <__libc_init_array+0x24>
 80009a8:	4d0b      	ldr	r5, [pc, #44]	; (80009d8 <__libc_init_array+0x40>)
 80009aa:	4c0c      	ldr	r4, [pc, #48]	; (80009dc <__libc_init_array+0x44>)
 80009ac:	f000 f820 	bl	80009f0 <_init>
 80009b0:	1b64      	subs	r4, r4, r5
 80009b2:	10a4      	asrs	r4, r4, #2
 80009b4:	2600      	movs	r6, #0
 80009b6:	42a6      	cmp	r6, r4
 80009b8:	d105      	bne.n	80009c6 <__libc_init_array+0x2e>
 80009ba:	bd70      	pop	{r4, r5, r6, pc}
 80009bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80009c0:	4798      	blx	r3
 80009c2:	3601      	adds	r6, #1
 80009c4:	e7ee      	b.n	80009a4 <__libc_init_array+0xc>
 80009c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ca:	4798      	blx	r3
 80009cc:	3601      	adds	r6, #1
 80009ce:	e7f2      	b.n	80009b6 <__libc_init_array+0x1e>
 80009d0:	08000a08 	.word	0x08000a08
 80009d4:	08000a08 	.word	0x08000a08
 80009d8:	08000a08 	.word	0x08000a08
 80009dc:	08000a0c 	.word	0x08000a0c

080009e0 <memset>:
 80009e0:	4402      	add	r2, r0
 80009e2:	4603      	mov	r3, r0
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d100      	bne.n	80009ea <memset+0xa>
 80009e8:	4770      	bx	lr
 80009ea:	f803 1b01 	strb.w	r1, [r3], #1
 80009ee:	e7f9      	b.n	80009e4 <memset+0x4>

080009f0 <_init>:
 80009f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009f2:	bf00      	nop
 80009f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009f6:	bc08      	pop	{r3}
 80009f8:	469e      	mov	lr, r3
 80009fa:	4770      	bx	lr

080009fc <_fini>:
 80009fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009fe:	bf00      	nop
 8000a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a02:	bc08      	pop	{r3}
 8000a04:	469e      	mov	lr, r3
 8000a06:	4770      	bx	lr
